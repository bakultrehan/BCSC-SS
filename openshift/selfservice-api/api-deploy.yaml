---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Deployment template for a notify api service.
    tags: "${API_NAME}"
  name: "${API_NAME}-deploy"
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
        pre:
          failurePolicy: Abort
          execNewPod:
            command:
            - "/bin/bash"
            - "-c"
            - "python manage.py db upgrade"
            env:
            - name: DATABASE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-secret"
                  key: DATABASE_ADMIN_PASSWORD
            - name: DATABASE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-config"
                  key: DATABASE_USERNAME
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-secret"
                  key: DATABASE_PASSWORD
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-config"
                  key: DATABASE_NAME
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-config"
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-config"
                  key: DATABASE_PORT
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: "${DB_NAME}-${TAG_NAME}-config"
                  key: DATABASE_URL
            containerName: "${API_NAME}"
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${API_NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          name: "${API_NAME}-${TAG_NAME}:${TAG_NAME}"
    - type: ConfigChange
    replicas: "${REPLICAS}"
    test: false
    selector:
      app: "${API_NAME}"
      deploymentconfig: "${API_NAME}"
    template:
      metadata:
        labels:
          app: "${API_NAME}"
          app-group: "${APP_GROUP}"
          deploymentconfig: "${API_NAME}"
          template: "${API_NAME}-deploy"
      spec:
        containers:
        - name: "${API_NAME}"
          image: "${API_NAME}-${TAG_NAME}"
          imagePullPolicy: Always
          command:
            - gunicorn
            - '-b'
            - :5000
            - selfservice_api:create_app()
          ports:
          - containerPort: 5000
            protocol: TCP
          envFrom:
          - configMapRef:
              name: ${API_NAME}-${TAG_NAME}-config
          env:
          - name: DATABASE_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-secret"
                key: DATABASE_ADMIN_PASSWORD
          - name: DATABASE_USERNAME
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_USERNAME
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-secret"
                key: DATABASE_PASSWORD
          - name: DATABASE_NAME
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_NAME
          - name: DATABASE_HOST
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_HOST
          - name: DATABASE_PORT
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_PORT
          - name: DATABASE_TEST_USERNAME
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_TEST_USER
          - name: DATABASE_TEST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-secret"
                key: DATABASE_TEST_PASSWORD
          - name: DATABASE_TEST_NAME
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_TEST_NAME
          - name: DATABASE_TEST_HOST
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_TEST_HOST
          - name: DATABASE_TEST_PORT
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_TEST_PORT
          - name: JWT_OIDC_ALGORITHMS
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_ALGORITHMS
          - name: JWT_OIDC_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_AUDIENCE
          - name: JWT_OIDC_CACHING_ENABLED
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_CACHING_ENABLED
          - name: JWT_OIDC_CLIENT_SECRET
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_CLIENT_SECRET
          - name: JWT_OIDC_ISSUER
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_ISSUER
          - name: JWT_OIDC_JWKS_CACHE_TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_JWKS_CACHE_TIMEOUT
          - name: JWT_OIDC_JWKS_URI
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_JWKS_URI
          - name: JWT_OIDC_WELL_KNOWN_CONFIG
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: JWT_OIDC_WELL_KNOWN_CONFIG
          - name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: "${DB_NAME}-${TAG_NAME}-config"
                key: DATABASE_URL
          - name: DYNAMIC_PROD_API_URL
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: DYNAMIC_PROD_API_URL
          - name: DYNAMIC_TEST_API_URL
            valueFrom:
              configMapKeyRef:
                name: "${API_NAME}-${TAG_NAME}-config"
                key: DYNAMIC_TEST_API_URL
          - name: DYNAMIC_PROD_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: "${API_NAME}-${TAG_NAME}-secret"
                key: DYNAMIC_PROD_API_TOKEN
          - name: DYNAMIC_TEST_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: "${API_NAME}-${TAG_NAME}-secret"
                key: DYNAMIC_TEST_API_TOKEN
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          livenessProbe:
            httpGet:
              path: "/"
              port: 5000
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/"
              port: 5000
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    creationTimestamp: 
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    ports:
    - name: 5000-tcp
      protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      deploymentconfig: "${API_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: Route
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    to:
      kind: Service
      name: "${API_NAME}"
      weight: 100
    port:
      targetPort: 5000-tcp
    tls:
      termination: edge
    wildcardPolicy: None
    host: "${API_NAME}-${TAG_NAME}.pathfinder.gov.bc.ca"
  status:
    ingress:
    - host:
      routerName: router
      conditions:
      - type: Admitted
        status: 'True'
      wildcardPolicy: None
parameters:
- name: API_NAME
  displayName: Name
  description: The name assigned to all of the OpenShift resources associated to the
    server instance.
  required: true
  value: selfservice-api
- name: APP_GROUP
  displayName: App Group
  description: The name assigned to all of the deployments in this project.
  required: true
  value: BC-ServiceCard
- name: IMAGE_NAMESPACE
  displayName: Image Namespace
  required: true
  description: The namespace of the OpenShift project containing the imagestream for
    the application.
  value: oultzp-tools
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
  value: dev
- name: DB_NAME
  displayName: Database App Name
  description: A valid database app name used by the service.
  required: true
  value: patroni-persistent
- name: CPU_REQUEST
  displayName: Resources CPU Request
  description: The resources CPU request (in cores) for this build.
  required: true
  value: 100m
- name: CPU_LIMIT
  displayName: Resources CPU Limit
  description: The resources CPU limit (in cores) for this build.
  required: true
  value: 750m
- name: MEMORY_REQUEST
  displayName: Resources Memory Request
  description: The resources Memory request (in Mi, Gi, etc) for this build.
  required: true
  value: 100Mi
- name: MEMORY_LIMIT
  displayName: Resources Memory Limit
  description: The resources Memory limit (in Mi, Gi, etc) for this build.
  required: true
  value: 2Gi
- name: REPLICAS
  displayName: The number of replicas to run
  description: The number of replicas to run in this environment.
  required: true
  value: '2'